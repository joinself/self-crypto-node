stages:
  - prebuild
  - build
  - release
  - deploy

.build-env-linux: &build-env-linux |
  apt-get update
  apt-get install -y libsodium-dev
  curl -O https://download.joinself.com/olm/libself-olm-0.1.28-linux-x86_64.tar.gz
  curl -O https://download.joinself.com/omemo/libself-omemo-0.1.12-linux-x86_64.tar.gz
  tar -zxvf libself-olm-0.1.28-linux-x86_64.tar.gz
  tar -zxvf libself-omemo-0.1.12-linux-x86_64.tar.gz
  mkdir libraries
  mkdir includes
  mv self-omemo-linux-x86_64/libself_omemo.so libraries
  mv self-olm-linux-x86_64/libself_olm.* libraries
  mv self-omemo-linux-x86_64/include/*.h includes
  mv self-olm-linux-x86_64/include/self_olm includes
  cp /usr/lib/x86_64-linux-gnu/libsodium.* libraries
  cp /usr/include/sodium.h includes
  cp -r /usr/include/sodium includes
  apt-get remove -y libsodium23 libsodium-dev

.build-env-mac: &build-env-mac |
  export NVM_DIR="$HOME/.nvm"
  . $(brew --prefix)/opt/nvm/nvm.sh
  mkdir libraries
  cp /usr/local/Cellar/libself-olm/0.1.28/lib/libself_olm.* libraries
  cp /usr/local/Cellar/libself-omemo/0.1.2/lib/libself_omemo.* libraries
  cp /usr/local/Cellar/libsodium/1.0.18_1/lib/libsodium.* libraries
  chmod 755 libraries/*.dylib
  chmod 755 libraries/*.a

.update-links-mac: &update-links-mac |
  cd prebuilds/darwin-x64
  install_name_tool -id "@loader_path/libsodium.23.dylib" libsodium.23.dylib
  install_name_tool -id "@loader_path/libself_olm.3.dylib" libself_olm.3.dylib
  install_name_tool -id "@loader_path/libself_omemo.dylib" libself_omemo.dylib
  install_name_tool -change /usr/local/opt/libsodium/lib/libsodium.23.dylib "@loader_path/libsodium.23.dylib" libself_olm.3.dylib
  install_name_tool -change /usr/local/opt/libsodium/lib/libsodium.23.dylib "@loader_path/libsodium.23.dylib" libself_omemo.dylib
  install_name_tool -change /usr/local/opt/libself-olm/lib/libself_olm.3.dylib "@loader_path/libself_olm.3.dylib" libself_omemo.dylib
  install_name_tool -change /usr/local/opt/libsodium/lib/libsodium.23.dylib "@loader_path/libsodium.23.dylib" electron.napi.node
  install_name_tool -change /usr/local/opt/libself-olm/lib/libself_olm.3.dylib "@loader_path/libself_olm.3.dylib" electron.napi.node
  install_name_tool -change /usr/local/opt/libself-omemo/lib/libself_omemo.dylib "@loader_path/libself_omemo.dylib" electron.napi.node
  install_name_tool -change /usr/local/opt/libsodium/lib/libsodium.23.dylib "@loader_path/libsodium.23.dylib" node.napi.node
  install_name_tool -change /usr/local/opt/libself-olm/lib/libself_olm.3.dylib "@loader_path/libself_olm.3.dylib" node.napi.node
  install_name_tool -change /usr/local/opt/libself-omemo/lib/libself_omemo.dylib "@loader_path/libself_omemo.dylib" node.napi.node

.build-env-windows: &build-env-windows |
  invoke-webrequest https://static.joinself.com/self-crypto/self-crypto-windows-dependencies.zip -outfile deps.zip
  expand-archive deps.zip .

.deploy-env: &deploy-env |
  export SCRIPTS_DIR=$(mktemp -d)
  git clone -q --depth 1 "${SCRIPTS_REPO}" "${SCRIPTS_DIR}"

.unit-test: &unit-test |
  yarn install
  yarn test

.build: &build |
  yarn install
  yarn prebuild

.git-release: &git-release |
  version=$(grep '"version":' package.json | awk '{print $2}' | tr -d '",')
  current_git_tag=$(git ls-remote -q --tags https://github.com/joinself/${CI_PROJECT_NAME} | sort -t / -k 3 -V | grep -v '{}' | tail -n 1 | awk -F / '{print $3}')
  subject=$(git log -n 1 --format=%s)
  body=$(git log -n 1 --format=%b | grep -E '^\*|^-' | sed 's/^*/-/g') || true

  if [[ -z ${body} ]]; then
    release_notes="- ${subject}"
  else
    release_notes="${body}"
  fi

  if [[ "${version}" != "${current_git_tag}" ]]; then
    git remote set-url origin https://github.com/joinself/${CI_PROJECT_NAME}
    git tag -a ${version} -m "${version}"
    git push origin ${version}
    gh release create "${version}" --notes "${release_notes}"
  else
    echo "Version hasn't changed. Nothing to do here."
  fi

.deploy-npm: &deploy-npm |
  apt-get -y install python3

  version=$(grep '"version":' package.json | awk '{print $2}' | tr -d '",')

  if ! npm view self-crypto versions | grep $version; then
    npm publish
    ${SCRIPTS_DIR}/slack-release-notification -n joinself -v ${version}
  else
    echo "Package version already exists. Nothing to do here."
  fi

secrets-check:
  stage: prebuild
  image: docker:stable-git
  services:
    - docker:19.03.2-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - SCRIPTS_DIR=$(mktemp -d)
    - git clone -q --depth 1 "${SCRIPTS_REPO}" "${SCRIPTS_DIR}"
    - ${SCRIPTS_DIR}/git-secrets
  only:
    - branches

unit-test-linux:
  stage: prebuild
  image: node:15.14.0-buster
  script:
    - *build-env-linux
    - *unit-test
  only:
    - branches

unit-test-mac:
  stage: prebuild
  script:
    - *build-env-mac
    - *unit-test
  only:
    - branches
  tags:
    - mac-shell

unit-test-windows:
  stage: prebuild
  image: eu.gcr.io/principal-oxide-204416/windows-build
  script:
    - *build-env-windows
    - *unit-test
  allow_failure: true
  only:
    - branches
  tags:
    - windows-docker

build-linux:
  stage: build
  image: node:15.14.0-buster
  script:
    - *build-env-linux
    - *build
  artifacts:
    paths:
      - prebuilds
  only:
    - branches

build-mac:
  stage: build
  script:
    - *build-env-mac
    - *build
    - *update-links-mac
  artifacts:
    paths:
      - prebuilds
  only:
    - branches
  tags:
    - mac-shell

build-windows:
  stage: build
  image: eu.gcr.io/principal-oxide-204416/windows-build
  script:
    - *build-env-windows
    - *build
  artifacts:
    paths:
      - prebuilds
  only:
    - branches
  tags:
    - windows-docker

release:
  stage: release
  image: eu.gcr.io/principal-oxide-204416/tools
  script:
    - *deploy-env
    - ${SCRIPTS_DIR}/git-setup
    - *git-release
  only:
    - main

npm:
  stage: deploy
  image: node:15.14.0-buster
  script:
    - *deploy-env
    - ${SCRIPTS_DIR}/npm-setup
    - *deploy-npm
  only:
    - main
