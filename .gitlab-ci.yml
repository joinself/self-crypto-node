stages:
  - prebuild
  - build
  - deploy

.build-env-linux: &build-env-linux |
  apt-get update
  apt-get install -y libsodium-dev
  curl -O https://download.joinself.com/olm/libself-olm_0.1.28_amd64.deb
  curl -O https://download.joinself.com/omemo/libself-omemo_0.1.12_amd64.deb
  apt-get install -y ./libself-olm_0.1.28_amd64.deb ./libself-omemo_0.1.12_amd64.deb

.build-env-mac: &build-env-mac |
  export NVM_DIR="$HOME/.nvm"
  . $(brew --prefix)/opt/nvm/nvm.sh

.build-env-windows: &build-env-windows |
  invoke-webrequest https://static.joinself.com/self-crypto/self-crypto-windows-dependencies.zip -outfile deps.zip
  expand-archive deps.zip .

.unit-test: &unit-test |
  yarn install
  yarn test

.build: &build |
  yarn install
  yarn prebuild

.deploy-github: &deploy-github |
  version=$(grep '"version":' src/package.json | awk '{print $2}' | tr -d '",')
  current_git_tag=$(git ls-remote -q --tags https://github.com/joinself/self-desktop | sort -t / -k 3 -V | grep -v '{}' | tail -n 1 | awk -F / '{print $3}')
  subject=$(git log -n 1 --format=%s)
  body=$(git log -n 1 --format=%b | grep -E '^\*|^-' | sed 's/^*/-/g') || true

  if [[ -z ${body} ]]; then
    release_notes="- ${subject}"
  else
    release_notes="${body}"
  fi

  if [[ "${version}" != "${current_git_tag}" ]]; then
    git remote set-url origin https://github.com/joinself/${CI_PROJECT_NAME}
    git tag -a ${version} -m "${version}"
    git push origin ${version}
    gh release create "${version}" --notes "${release_notes}" ./release/*.AppImage ./release/*.exe ./release/*.dmg ./release/latest.yml ./release/latest-linux.yml ./release/latest-mac.yml
    ${SCRIPTS_DIR}/slack-release-notification -n joinself -v ${version}
  else
    echo "Version hasn't changed. Nothing to do here."
  fi

unit-test-linux:
  stage: prebuild
  image: node:15.14.0-buster
  script:
    - *build-env-linux
    - *unit-test
  only:
    - branches

unit-test-mac:
  stage: prebuild
  script:
    - *build-env-mac
    - *unit-test
  only:
    - branches
  tags:
    - mac

build-linux:
  stage: build
  image: node:15.14.0-buster
  script:
    - *build-env-linux
    - *build
    - ls -lah prebuilds
    - ls -lah prebuilds/linux-x64
  artifacts:
    paths:
      - release
  only:
    - branches

build-mac:
  stage: build
  script:
    - *build-env-mac
    - *build
    - ls -lah prebuilds/darwin-x64
  artifacts:
    paths:
      - release
  only:
    - branches
  tags:
    - mac

build-windows:
  stage: build
  script:
    - *build-env-windows
    - *build
    - ls prebuilds
  artifacts:
    paths:
      - release
  only:
    - branches
  tags:
    - windows

.github:
  stage: deploy
  image: eu.gcr.io/principal-oxide-204416/deploy
  script:
    - export SCRIPTS_DIR=$(mktemp -d)
    - git clone -q --depth 1 "${SCRIPTS_REPO}" "${SCRIPTS_DIR}"
    - ${SCRIPTS_DIR}/git-setup
    - *deploy-github
  only:
    - master
